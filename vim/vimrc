" TODO: http://stackoverflow.com/questions/95072/what-are-your-favorite-vim-tricks/225852#225852
" General "{{{
set nocompatible  " disable vi compatibility.
set autowrite  " Writes on make/shell commands
set timeoutlen=600  " Time to wait after ESC (default causes an annoying delay)
set clipboard=unnamed,unnamedplus
set backspace=indent,eol,start
set pastetoggle=<F10> "  toggle between paste and normal: for 'safer' pasting from keyboard
set tags=./tags;$HOME " walk directory tree upto $HOME looking for tags
" Modeline
set modeline
set modelines=5 " default numbers of lines to read for modeline instructions
" Backup
set nowritebackup
set nobackup
set directory=/tmp// " prepend(^=) $HOME/.tmp/ to default path; use full path as backup filename(//)
" Buffers
set hidden " The current buffer can be put to the background without writing to disk
" Match and search
set hlsearch    " highlight search
set ignorecase  " Do case in sensitive matching with
set smartcase       " be sensitive when there's a capital letter
" "}}}
" Formatting "{{{
set fo+=o " Automatically insert the current comment leader after hitting 'o' or 'O' in Normal mode.
set fo-=r " Do not automatically insert a comment leader after an enter
set fo-=t " Do no auto-wrap text using textwidth (does not apply to comments)

set nowrap
set textwidth=0     " Don't wrap lines by default
set wildmode=longest,list " At command line, complete longest common string, then list alternatives.

set tabstop=4    " Set the default tabstop
set softtabstop=4
set shiftwidth=4 " Set the default shift width for indents
set expandtab   " Make tabs into spaces (set by tabstop)

set cindent
set cinoptions=:s,ps,ts,cs
set cinwords=if,else,while,do,for,switch,case

filetype indent plugin indent on             " Automatically detect file types.
" HTML Formatting
let g:html_indent_script1 = "inc"
let g:html_indent_style1 = "inc"
let g:html_indent_inctags = "html,body,head,tbody,div,table,tr,p"

" PHP Formatting
let g:PHP_outdentphpescape = 1
let g:PHP_removeCRwhenUnix = 1
let g:PHP_outdentSLComments = 1
let g:PHP_default_indenting = 1
let g:PHP_vintage_case_default_indent = 1
" "}}}
" Visual "{{{
set number  " Line numbers off
set showmatch  " Show matching brackets.
set matchtime=5  " Bracket blinking.
set novisualbell  " No blinking
set noerrorbells  " No noise.
set laststatus=2  " Always show status line.
set vb t_vb= " disable any beeps or flashes on error
set shortmess=atI " Shortens messages

set nolist " Display unprintable characters f12 - switches

set foldenable " Turn on folding
set foldmethod=marker " Fold on the marker
set foldlevel=0 " Don't autofold anything (but I can still fold manually)
set foldopen=block,hor,mark,percent,quickfix,tag " what movements open folds

"set mouse-=a   " Disable mouse
set mousehide  " Hide mouse after chars typed

set splitbelow
set splitright

" "}}}

"$ Command and Auto commands " {{{
" Sudo write
comm! W exec 'w !sudo tee % > /dev/null' | e!

"Auto commands
au BufRead,BufNewFile {Gemfile,Rakefile,Capfile,*.rake,config.ru}     set ft=ruby
au BufRead,BufNewFile {*.md,*.mkd,*.markdown}                         set ft=markdown
au BufRead,BufNewFile {*.taskpaper}                                   set ft=taskpaper
au BufRead,BufNewFile {*.less}                                        set ft=less
au BufRead,BufNewFile {*.html}                                        set ft=twig
au BufRead,BufNewFile {*.tex}                                         nnoremap <F2> :!make<CR>
au BufRead,BufNewFile *.pde                                           set filetype=arduino
au BufRead,BufNewFile *.ino                                           set filetype=arduino
au BufRead,BufNewFile {COMMIT_EDITMSG}                                set ft=gitcommit

au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | execute "normal g'\"" | endif " restore position in file
" " }}}

" GUI Fonts " {{{
if has("gui_running")
  if has("gui_gtk2")
    " set guifont=Inconsolata\ 12
    set guifont=Terminal:h14:cOEM
  elseif has("gui_win32")
    " set guifont=Consolas:h11:cANSI
    " set guifont=Liberation_Mono_for_Powerline:h10
    set guifont=Terminal:h14:cOEM
  endif
endif
" }}}
" Key mappings " {{{
let mapleader = ","
let maplocalleader = ","
if has('win32') || has('win64')
    set directory=.,$TEMP " Swap file support for windows.
    nnoremap <silent> <LocalLeader>vs :source $HOME/_vimrc<CR>
    nnoremap <silent> <LocalLeader>vt :tabnew $HOME/_vimrc<CR>
    nnoremap <silent> <LocalLeader>ve :e $HOME/_vimrc<CR>
    nnoremap <silent> <LocalLeader>vd :e $HOME/.vim/ <CR>
    nnoremap <silent> <LocalLeader>tn :e ~/Dropbox/TaskPaper/Todo.taskpaper<CR>
    nnoremap <silent> <LocalLeader>ts :e ~/Dropbox/TaskPaper/TodoSomeday.taskpaper<CR>
else
    nnoremap <silent> <LocalLeader>vs :source ~/git/vim/vimrc<CR>
    nnoremap <silent> <LocalLeader>vt :tabnew ~/git/vim/vimrc<CR>
    nnoremap <silent> <LocalLeader>ve :e ~/git/dotfiles/vim/vimrc<CR>
    nnoremap <silent> <LocalLeader>vd :e ~/.vim/ <CR>
    nnoremap <silent> <LocalLeader>tn :e ~/Dropbox/todo.txt<CR>
    nnoremap <silent> <LocalLeader>tn :e ~/todo.txt<CR>
    " nnoremap <silent> <LocalLeader>ts :e ~/Dropbox/TaskPaper/TodoSomeday.taskpaper<CR>
endif

nnoremap <silent> <LocalLeader><Space> :noh<CR>
nnoremap <silent> <Space>b :LustyJuggler<CR>

" Buffer maps
"" Close buffer without closing split
nmap <silent> <LocalLeader>d :bp\|bd #<CR>
"" Next buffer
nmap <silent> <LocalLeader>n :bn<CR>
"" Previous buffer
nmap <silent> <LocalLeader>n :bp<CR>

" Split line(opposite to S-J joining line)
nnoremap <silent> <C-J> gEa<CR><ESC>ew

" Add a new line at the end of the line.
map <S-CR> A<CR><ESC>

imap <C-Space> <C-X><C-O>

" Control+S and Control+Q are flow-control characters: disable them in your terminal settings.
" $ stty -ixon -ixoff
noremap <C-S> :update<CR>
vnoremap <C-S> <C-C>:update<CR>
inoremap <C-S> <C-O>:update<CR>

" show/Hide hidden Chars
map <silent> <F12> :set invlist<CR>

" generate HTML version current buffer using current color scheme
map <silent> <LocalLeader>2h :runtime! syntax/2html.vim<CR>
" " }}}
" Setting up vim plugin manager"{{{
let iCanHazVAM=1
if has('win32') || has('win64')
    set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after,$HOME/.vim/bundle/vim-addon-manager/

    let vam_readme=expand('$HOME/.vim/bundle/vim-addon-manager/README.md')
    if !filereadable(vam_readme)
        echo "Installing vim-addon-manager.."
        echo ""
        silent :exe '!mkdir -p ' . $HOME .'/.vim/bundle'
        silent :exe '!git clone https://github.com/MarcWeber/vim-addon-manager '. $HOME .'/.vim/bundle/vim-addon-manager'
        let iCanHazVAM=0
    endif
else
    let vam_readme=expand('~/.vim/bundle/vim-addon-manager/README.md')
    if !filereadable(vam_readme)
        echo "Installing Vim Addon Manager.."
        echo ""
        silent !mkdir -p ~/.vim/bundle
        silent !git clone https://github.com/MarcWeber/vim-addon-manager ~/.vim/bundle/vim-addon-manager
        let iCanHazVAM=0
    endif
    set rtp+=~/.vim/bundle/vim-addon-manager/
endif"}}}
" Plugins " {{{
filetype off
let g:vim_addon_manager = {'scms': {'git': {}}}
let g:vim_addon_manager.log_to_buf = 1
fun! MyGitCheckout(repository, targetDir)
    let a:repository.url = substitute(a:repository.url, '^git://github', 'http://github', '')
    return vam#utils#RunShell('git clone --depth=1 $.url $p', a:repository, a:targetDir)
endfun
let g:vim_addon_manager.scms.git.clone=['MyGitCheckout']

call vam#ActivateAddons(["github:tpope/vim-commentary", "github:tpope/vim-unimpaired", "github:tpope/vim-vinegar", "github:tpope/vim-repeat", "github:tpope/vim-surround", "github:tpope/vim-speeddating","github:vim-airline/vim-airline",'github:altercation/vim-colors-solarized'])
 "github:svermeulen/vim-easyclip", 
"github:scrooloose/syntastic","github:myint/syntastic-extras", "github:majutsushi/tagbar", "github:mivok/vimtodo", "vim-poslist","github:tpope/vim-speeddating",  "github:nathanaelkane/vim-indent-guides", "github:lukaszb/vim-web-indent", "github:Raimondi/delimitMate", "github:mbbill/undotree", "github:godlygeek/tabular", "github:spf13/PIV", "github:rking/ag",  "github:garbas/vim-snipmate","github:scrooloose/snipmate-snippets",  "github:Townk/vim-autoclose",  "github:Shougo/neosnippet-snippets", "github:haya14busa/incsearch","snipmate",  
"mhinz/vim-hugefile"
"github:honza-snippets", "github:vim-scripts/hexman", "github:vim-scripts/DrawIt","github:ChrisYip/Better-CSS-Syntax-for",  
""github:Shougo/neocomplete", "github:Shougo/neosnippet", 
" NeoBundle 'powerline/fonts', {
" \ 'build': {
"     \ 'mac': './install.sh',
"     \ 'linux': './install.sh',
"     \ 'unix': './install.sh',
"     \ },
" \ }

" NeoBundle 'https://github.com/mivok/vimtodo'
" NeoBundle 'https://github.com/vim-scripts/VOoM'
" NeoBundle 'https://github.com/tpope/vim-sensible'
" NeoBundle 'freitass/todo.txt-vim'
" NeoBundle 'godlygeek/tabular'
" NeoBundle 'plasticboy/vim-markdown'
" Bundle 'https://github.com/mivok/vimtodo'
" Bundle 'LustyJuggler'
" NeoBundle 'jQuery'
" NeoBundle 'tpope/vim-markdown'
" NeoBundle 'tpope/vim-cucumber'
" NeoBundle 'spf13/vim-preview'
" NeoBundle 'markcornick/vim-vagrant'
" NeoBundle 'ekalinin/Dockerfile.vim'
" NeoBundle 'https://github.com/vim-scripts/autohotkey-ahk'
" Bundle "python_fold_compact"
" NeoBundle 'https://github.com/chrisbra/csv.vim'
" NeoBundle 'https://github.com/Glench/Vim-Jinja2-Syntax'
" NeoBundle 'https://github.com/evidens/vim-twig'
" NeoBundle 'leshill/vim-json'
" NeoBundle 'https://github.com/groenewege/vim-less'
" NeoBundle 'https://github.com/StanAngeloff/php.vim'
" NeoBundle 'chase/vim-ansible-yaml'
" NeoBundle 'https://github.com/digitaltoad/vim-jade'
" NeoBundle 'Matt-Deacalion/vim-systemd-syntax'
" NeoBundle 'mustache/vim-mustache-handlebars'
" NeoBundle 'https://github.com/jplaut/vim-arduino-ino'
" NeoBundle 'evanmiller/nginx-vim-syntax'
" NeoBundle 'myhere/vim-nodejs-complete'
" NeoBundle 'pangloss/vim-javascript'
" NeoBundle 'othree/javascript-libraries-syntax.vim'
" NeoBundle 'matthewsimo/angular-vim-snippets'
" NeoBundle 'claco/jasmine.vim'
" NeoBundle 'burnettk/vim-angular'
" NeoBundle 'tpope/vim-haml'
" Bundle 'https://github.com/gmarik/snipmate.vim'
" NeoBundle 'SirVer/ultisnips'
" NeoBundle 'honza/vim-snippets'
" NeoBundle 'fugitive.vim'
" NeoBundle 'gregsexton/gitv'
" Bundle "https://github.com/airblade/vim-gitgutter"
" NeoBundle 'LaTeX-Box'
" NeoBundle 'mattn/emmet-vim'
"Bundle 'ragtag.vim' " A set of useful mappings for working with html and other web languages.
" NeoBundle 'sudo.vim'
" NeoBundle 'Align'
" NeoBundle 'Lokaltog/vim-easymotion'
" NeoBundle 'https://github.com/bling/vim-bufferline'
" NeoBundle 'https://github.com/bronson/vim-trailing-whitespace'
" NeoBundle 'https://github.com/kien/ctrlp.vim'

" colour schemes
" NeoBundle 'altercation/vim-colors-solarized'
" NeoBundle 'chriskempson/base16-vim'

let g:yankring_history_dir = $HOME.'/.vim/'
let g:yankring_history_file = '.yankring_history'
"Bundle "https://github.com/mattn/gist-vim"

" syntax for haml, sass and scss.
" sytax for html5
" NeoBundle 'Valloric/YouCompleteMe', {
"      \ 'build' : {
"      \     'mac' : 'git submodule update --init --recursive; ./install.sh --clang-completer --system-libclang --omnisharp-completer',
"      \     'unix' : './install.sh --clang-completer --system-libclang --omnisharp-completer',
"      \     'windows' : './install.sh --clang-completer --system-libclang --omnisharp-completer',
"      \     'cygwin' : './install.sh --clang-completer --system-libclang --omnisharp-completer'
"      \    }
"      \ }

" Snippets
" Trigger configuration. Do not <tab> if you use https://github.com/Valloric/YouCompleteMe.
" let g:UltiSnipsSnippetDirectories=["ultisnips"]
" let g:UltiSnipsExpandTrigger="<tab>"
" let g:UltiSnipsJumpForwardTrigger="<c-b>"
" let g:UltiSnipsJumpBackwardTrigger="<c-z>"
" If you want :UltiSnipsEdit to split your window.
" let g:UltiSnipsEditSplit="vertical"


" let g:LargeFile=1

" allows zooming in on an invididual split.
"noremap <LocalLeader>o :ZoomWin<CR>
"vnoremap <LocalLeader>o <C-C>:ZoomWin<CR>
"inoremap <LocalLeader>o <C-O>:ZoomWin<CR>
" noremap <C-W>+o :ZoomWin<CR>

" vim-airline
" let g:airline_powerline_fonts = 1
" let g:airline#extensions#tabline#enabled = 1

if v:version > 701
  " NeoBundle 'zhaocai/GoldenView.Vim'
endif
" let g:goldenview__enable_default_mapping=0


filetype plugin indent on
" " }}}
" Gui and theme options"{{{
if has('gui_running')
    set background=dark
    set guioptions-=m
    set guioptions-=T
    set guioptions-=r
else
    set background=dark
endif

if &term =~ '256color'
    " disable Background Color Erase (BCE) so that color schemes
    " render properly when inside 256-color tmux and GNU screen.
    " see also http://sunaku.github.io/vim-256color-bce.html
    set t_ut=
endif

let g:solarized_visibility = "high"
let g:solarized_contrast = "high"
colorscheme solarized
"}}}
" Command and Auto commands " {{{
" Sudo write
comm! W exec 'w !sudo tee % > /dev/null' | e!

"Auto commands
au BufRead,BufNewFile {*.php}                                         set ft=php
" au BufRead,BufNewFile {*.php}                                         UltiSnipsAddFiletypes php
au BufRead,BufNewFile {Gemfile,Rakefile,Capfile,*.rake,config.ru}     set ft=ruby
au BufRead,BufNewFile {*.md,*.mkd,*.markdown}                         set ft=markdown
au BufRead,BufNewFile {*.taskpaper}                                   set ft=taskpaper
au BufRead,BufNewFile {*.less}                                        set ft=less
au BufRead,BufNewFile {*.html}                                        set ft=html
au BufRead,BufNewFile {*.jade}                                        set ft=jade
au BufRead,BufNewFile {COMMIT_EDITMSG}                                set ft=gitcommit

au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | execute "normal g'\"" | endif " restore position in file
" " }}}
